// Test generated by RoostGPT for test openAIConnector using AI Type Open AI and AI Model gpt-4-1106-preview


// Unit tests for Birthday.jsx
import React from 'react';
import { render, cleanup, screen } from '@testing-library/react';
import Birthday from '../../src/Birthday'; // Correct relative import path
import '@testing-library/jest-dom/extend-expect';

// Mocking external dependencies
jest.mock('../../src/Countdown', () => 'Countdown');

// Clear all mocks and DOM after each test
afterEach(cleanup);

// Test suite for Birthday component
describe('<Birthday />', () => {
  const realDateNow = Date.now.bind(global.Date);

  beforeAll(() => {
    // Mocking Date.now() to return a fixed timestamp (e.g., June 1, 2023)
    const fixedTimestamp = new Date(2023, 5, 1).getTime(); // Note: Month is 0-indexed
    global.Date.now = jest.fn(() => fixedTimestamp);
  });

  afterAll(() => {
    global.Date.now = realDateNow;
  });

  test('renders without crashing with default props', () => {
    render(<Birthday />);
    expect(screen.getByText('Generate Here')).toBeInTheDocument();
  });

  test('renders the countdown when a future birthday is provided', () => {
    render(<Birthday name={'John'} day={20} month={6} />);
    expect(screen.getByText('Countdown')).toBeInTheDocument();
  });

  test('renders happy birthday message when current day is the birthday', () => {
    render(<Birthday name={'Jane'} day={1} month={6} />);
    expect(screen.getByText('Happy Birthday, Jane!')).toBeInTheDocument();
  });

  test('displays next year\'s date after birthday has passed', () => {
    render(<Birthday name={'John'} day={1} month={5} />);
    expect(screen.getByText('Birth-Date: 1 May 2024')).toBeInTheDocument();
  });

  test('handles invalid day or month props by using default values', () => {
    render(<Birthday name={'Invalid'} day={-1} month={13} />);
    expect(screen.getByText('Birth-Date: 14 June 2023')).toBeInTheDocument();
    expect(screen.getByText('Generate Here')).toBeInTheDocument();
  });
});

